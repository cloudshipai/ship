name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Run tests
        run: go test -v -race -short -coverprofile=coverage.out ./...

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Run go fmt
        run: |
          if [ "$(gofmt -l . | wc -l)" -gt 0 ]; then
            echo "Files need formatting:"
            gofmt -l .
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Build
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          # Set version info for CI builds
          VERSION="dev-${GITHUB_SHA::8}"
          if [[ "${GITHUB_REF}" =~ ^refs/tags/v[0-9] ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          COMMIT="${GITHUB_SHA}"
          DATE="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          
          # Build with version information
          go build -v \
            -ldflags "-X main.version=${VERSION} -X main.commit=${COMMIT} -X main.date=${DATE}" \
            -o ship-${{ matrix.os }}-${{ matrix.arch }} \
            ./cmd/ship
            
      - name: Test version output (Linux amd64 only)
        if: matrix.os == 'linux' && matrix.arch == 'amd64'
        run: ./ship-linux-amd64 version

  goreleaser-check:
    name: GoReleaser Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Check GoReleaser config
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: '~> v2'
          args: check